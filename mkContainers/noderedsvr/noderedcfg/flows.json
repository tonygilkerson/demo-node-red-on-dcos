[{"id":"eaa9409e.ffdbc","type":"tab","label":"Initiators"},{"id":"9d03a6f0.941a98","type":"tab","label":"Router"},{"id":"d7204c91.7351c","type":"tab","label":"Tracking Service"},{"id":"441ab614.a9c4d8","type":"tab","label":"Acct1 Flow"},{"id":"c80985bf.0d2388","type":"tab","label":"WSG Service"},{"id":"50d4334c.9179ec","type":"tab","label":"TX Service"},{"id":"e72f5872.774f38","type":"tab","label":"nch API Gateway"},{"id":"1a870f79.ae0e91","type":"amqp-server","z":"","host":"p1.dcos","port":"10003","vhost":"demo-vhost","keepalive":"30","usetls":false,"verifyservercert":true,"usetopology":false,"topology":"{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}"},{"id":"d64b8e3f.b60c","type":"link in","z":"441ab614.a9c4d8","name":"","links":["96ea41ed.f886f"],"x":155,"y":280,"wires":[["6bd547d7.a21888"]]},{"id":"6bd547d7.a21888","type":"switch","z":"441ab614.a9c4d8","name":"Event Souce?","property":"payload.eventSource","propertyType":"msg","rules":[{"t":"eq","v":"SCHEDULER","vt":"str"},{"t":"eq","v":"WSG","vt":"str"},{"t":"eq","v":"TX","vt":"str"},{"t":"eq","v":"NCH_API","vt":"str"}],"checkall":"true","outputs":4,"x":280,"y":380,"wires":[["35f79941.1a1146"],["619f0e80.82c1d"],["77ffec29.acdad4"],["274fe86e.99bd58"]]},{"id":"c892c665.381b28","type":"amqp out","z":"441ab614.a9c4d8","name":"","routingkey":"","iotype":"4","ioname":"wsgQ","server":"1a870f79.ae0e91","x":910,"y":100,"wires":[]},{"id":"35f79941.1a1146","type":"switch","z":"441ab614.a9c4d8","name":"Scheduler - eventType?","property":"payload.eventType","propertyType":"msg","rules":[{"t":"eq","v":"WSG_GET_ITEM_REQUEST","vt":"str"},{"t":"eq","v":"WSG_GET_ORDER_REQUEST","vt":"str"},{"t":"eq","v":"WSG_GET_CUSTOMER_REQUEST","vt":"str"}],"checkall":"true","outputs":3,"x":530,"y":280,"wires":[["2e3b401e.baf9d"],[],[]]},{"id":"7479f898.9f9bb8","type":"amqp out","z":"eaa9409e.ffdbc","name":"","routingkey":"","iotype":"4","ioname":"routerQ","server":"1a870f79.ae0e91","x":400,"y":180,"wires":[]},{"id":"5bd6be0e.637c6","type":"inject","z":"eaa9409e.ffdbc","name":"Scheduled Get Item Request","topic":"test","payload":"{   \"accountId\": \"acct1\",   \"routeAction\": \"ROUTE\",   \"wfdSessionId\": \"eventId-GUID\",   \"eventId\": \"eventId-GUID\",   \"eventDateTime\": \"20170205T23:25:32.000+0000\",   \"eventType\": \"WSG_GET_ITEM_REQUEST\",   \"eventSource\": \"SCHEDULER\",   \"flowContext\": {     \"testProdFlag\": \"TEST\",     \"altBillingAccount\": \"acct999\"   },   \"payloadAttachments\": [     {       \"fileName\": \"dummy.dat\",       \"fileStorageId\": \"storage-GUID\",       \"charEncoding\": \"UTF-8\",       \"fileType\": \"TXT\",       \"location\": \"STORAGE\"     }   ] }","payloadType":"json","repeat":"","crontab":"","once":false,"x":160,"y":100,"wires":[["7479f898.9f9bb8"]]},{"id":"d70a77e9.144ba8","type":"comment","z":"eaa9409e.ffdbc","name":"ReadMe","info":"# Initiators \n\nData from an external system is received by and endpoint and sent to the router \nwhere a bespoke flow is performed.  \n\n## Flow Initiation Message Construction \nOnce data is recieved from the endpoint the connector must construct a *Flow Initiation Message* \nand send that message to the router exchange to initiate the flow\n\nThe message below will make a WSG request to get items, if any items are found they \nare used to initiate the flow.\n\n```\n\n\n{\n  \"accountId\": \"acct1\",\n  \"routeAction\": \"ROUTE\",\n  \"wfdSessionId\": \"eventId-GUID\",\n  \"eventId\": \"eventId-GUID\",\n  \"eventDateTime\": \"20170205T23:25:32.000+0000\",\n  \"eventType\": \"WSG_GET_ITEM_REQUEST\",\n  \"eventSource\": \"SCHEDULER\",\n  \"flowContext\": {\n    \"testProdFlag\": \"TEST\",\n    \"altBillingAccount\": \"acct999\"\n  },\n  \"payloadAttachments\": [\n    {\n      \"fileName\": \"dummy.dat\",\n      \"fileStorageId\": \"storage-GUID\",\n      \"charEncoding\": \"UTF-8\",\n      \"fileType\": \"TXT\",\n      \"location\": \"STORAGE\"\n    }\n  ]\n}\n\n\n```\n\nHere is the schemp for an initial flow message\n\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"Routing Message\",\n  \"description\": \"Description of an orchestrated message\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"accountId\": {\n      \"description\": \"A unique Id for the organization that owns this message.\",\n      \"type\": \"string\"\n    },\n    \"routeAction\": {\n      \"description\": \"ROUTE - continue an existing flow, END - end a flow.\",\n      \"type\": \"string\"\n    },\n    \"wfdSessionId\": {\n      \"description\": \"A globally unique ID for this run-time instance of the workflow, used for tracking.\",\n      \"type\": \"string\"\n    },\n    \"eventId\": {\n      \"description\": \"A globally unique ID for this event.  This will be used for tracking\",\n      \"type\": \"string\"\n    },\n    \"eventDateTime\": {\n      \"description\": \"The date and time on which this event occurred.\",\n      \"type\": \"string\"\n    },\n    \"eventType\": {\n      \"description\": \"The type of event such as ECOM_GET_ITEM, ERP_GET_ITEM, ECOM_GET_ORDER, ERP_GET_ORDER,  etc.. \",\n      \"type\": \"string\"\n    },\n    \"eventSource\": {\n      \"description\": \"The name of the event producer, WSG, ROUTER, TX, etc...\",\n      \"type\": \"string\"\n    },\n    \"flowContext\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\n        \"type\": \"string\",\n        \"description\": \"string values\"\n      }\n    },\n    \"payloadAttachments\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"location\": {\n            \"type\": \"string\",\n            \"description\": \"INLINE or STORAGE, if STORAGE then fileStorageId is required, if INLINE then inlineData is required \",\n            \"required\": true\n          },\n          \"inlineData\": {\n            \"type\": \"string\",\n            \"description\": \"The file data\",\n            \"required\": false\n          },          \n         \"fileName\": {\n            \"type\": \"string\",\n            \"description\": \"The file name\",\n            \"required\": true\n          },\n          \"fileStorageId\": {\n            \"type\": \"string\",\n            \"description\": \"A unique storage id used to retrieve the file if needed\",\n            \"required\": false\n          },\n          \"charEncoding\": {\n            \"type\": \"string\",\n            \"description\": \"the char encodeing of the file\",\n            \"required\": true\n          },\n          \"fileType\": {\n            \"type\": \"string\",\n            \"description\": \"file type such as, ITEMS, ORDERS, SALES \",\n            \"required\": false\n          }\n        },\n        \"description\": \"the value\",\n        \"required\": true\n      }\n    }\n  },\n  \"required\": [\n    \"accountId\",\n    \"routeAction\",\n    \"eventId\",\n    \"eventDateTime\",\n    \"eventType\",\n    \"eventSource\"\n  ]\n}\n```\n\n","x":103,"y":61,"wires":[]},{"id":"47eacd96.ba0cc4","type":"amqp in","z":"9d03a6f0.941a98","name":"","topic":"","iotype":"4","ioname":"routerQ","server":"1a870f79.ae0e91","x":90,"y":260,"wires":[["7c857e4a.48ef2"]]},{"id":"c6c5be76.01ccc","type":"switch","z":"9d03a6f0.941a98","name":"ROUTE - Select Account","property":"payload.accountId","propertyType":"msg","rules":[{"t":"eq","v":"acct1","vt":"str"},{"t":"eq","v":"acct2","vt":"str"},{"t":"eq","v":"acct3","vt":"str"},{"t":"eq","v":"acct4","vt":"str"}],"checkall":"true","outputs":4,"x":695,"y":358,"wires":[["96ea41ed.f886f"],["1466bf81.ceedd"],["8a153e23.b6606"],["5b8e4e07.19cfd"]]},{"id":"96ea41ed.f886f","type":"link out","z":"9d03a6f0.941a98","name":"acct1","links":["d64b8e3f.b60c"],"x":903.5,"y":253.14999389648438,"wires":[]},{"id":"1466bf81.ceedd","type":"link out","z":"9d03a6f0.941a98","name":"acct2","links":[],"x":902.5,"y":311.1499938964844,"wires":[]},{"id":"8a153e23.b6606","type":"link out","z":"9d03a6f0.941a98","name":"acct3","links":[],"x":906.5,"y":398.1499938964844,"wires":[]},{"id":"82aec810.f19ad8","type":"comment","z":"9d03a6f0.941a98","name":"System Flow","info":"","x":250,"y":60,"wires":[]},{"id":"175fddc2.3a2192","type":"comment","z":"9d03a6f0.941a98","name":"Subscriber Flows","info":"","x":945,"y":356,"wires":[]},{"id":"5b8e4e07.19cfd","type":"link out","z":"9d03a6f0.941a98","name":"acct4","links":[],"x":908.5,"y":454.1499938964844,"wires":[]},{"id":"7c857e4a.48ef2","type":"function","z":"9d03a6f0.941a98","name":"set tracking Ids","func":"//set sessionId if needed\nif (msg.payload.wfdSessionId === null){\n    msg.payload.wfdSessionId = msg.payload.eventId;\n}\n\n//generate a tracking message\n//must use msg for now\ntrackingMsg = msg;\n\n//set parent and event ids\nmsg.payload.parentEventId = msg.payload.eventId;\nmsg.payload.eventId = null; //next service is expected to populate eventId\n\nreturn [trackingMsg, msg];\n\n","outputs":"2","noerr":0,"x":240,"y":340,"wires":[["ea7abd4a.34d28"],["140f4067.f103a"]]},{"id":"ea7abd4a.34d28","type":"amqp out","z":"9d03a6f0.941a98","name":"","routingkey":"","iotype":"4","ioname":"trackingQ","server":"1a870f79.ae0e91","x":400,"y":240,"wires":[]},{"id":"140f4067.f103a","type":"switch","z":"9d03a6f0.941a98","name":"Router Action","property":"payload.routeAction","propertyType":"msg","rules":[{"t":"eq","v":"ROUTE","vt":"str"},{"t":"eq","v":"END","vt":"str"}],"checkall":"true","outputs":2,"x":420,"y":418,"wires":[["c6c5be76.01ccc"],["b5d2fcd6.5c84d"]]},{"id":"b5d2fcd6.5c84d","type":"function","z":"9d03a6f0.941a98","name":"END","func":"// do flowOnEnd stuff\n// need to give this more thought, maybe just track, do nothing for now\nreturn msg;","outputs":1,"noerr":0,"x":650,"y":540,"wires":[[]]},{"id":"ede143b8.59747","type":"amqp in","z":"d7204c91.7351c","name":"","topic":"","iotype":"4","ioname":"trackingQ","server":"1a870f79.ae0e91","x":160,"y":120,"wires":[["594021cb.fb025","c7b38383.e9d8f"]]},{"id":"a7aab2a8.daf86","type":"comment","z":"d7204c91.7351c","name":"Tracking Service","info":"This is a fake tracking service. It is incomplete, need to give this more thought...\n","x":180,"y":60,"wires":[]},{"id":"594021cb.fb025","type":"file","z":"d7204c91.7351c","name":"","filename":"/tmp/tracking.dat","appendNewline":true,"createDir":true,"overwriteFile":"false","x":420,"y":180,"wires":[]},{"id":"b91c94d9.2ad818","type":"link in","z":"9d03a6f0.941a98","name":"","links":["274fe86e.99bd58"],"x":495,"y":680,"wires":[["b5d2fcd6.5c84d"]]},{"id":"1174169e.5c3d79","type":"comment","z":"9d03a6f0.941a98","name":"Router Ended Flow","info":"","x":490,"y":620,"wires":[]},{"id":"71e6c2b0.b5b75c","type":"comment","z":"9d03a6f0.941a98","name":"Service Ended Flow","info":"","x":490,"y":480,"wires":[]},{"id":"fd3e30f0.6cfa6","type":"debug","z":"d7204c91.7351c","name":"","active":true,"console":"false","complete":"false","x":550,"y":380,"wires":[]},{"id":"c7b38383.e9d8f","type":"csv","z":"d7204c91.7351c","name":"","sep":",","hdrin":"","hdrout":"","multi":"one","ret":"\\n","temp":"accountId, routeAction, eventType","x":250,"y":380,"wires":[["fd3e30f0.6cfa6"]]},{"id":"e6cbe949.768a78","type":"comment","z":"9d03a6f0.941a98","name":"todos","info":"persist messages to storage to enable restart ability","x":870,"y":700,"wires":[]},{"id":"2e3b401e.baf9d","type":"function","z":"441ab614.a9c4d8","name":"Prep WSG Call","func":"//The following were set in the UI from a select box or something like that\n//when this WFD was created\n\nmsg.payload.flowContext.locationId = \"locationId-123\";\nmsg.payload.flowContext.deviceId = \"deviceId-123\";\nmsg.payload.flowContext.transactionId = \"TrasactionId-123\"; //reference to a Shopify GET_ITEM CT\n\n//The WSG services will look up the Channel Transaction Parms using the above IDs\n//the CT parms will then be used to formulate the proper WS request\n\n\n\nreturn msg;","outputs":1,"noerr":0,"x":760,"y":180,"wires":[["c892c665.381b28"]]},{"id":"ae7ba85f.9ca028","type":"amqp in","z":"c80985bf.0d2388","name":"","topic":"","iotype":"4","ioname":"wsgQ","server":"1a870f79.ae0e91","x":110,"y":120,"wires":[["75519d6b.2a4574"]]},{"id":"edd0f78b.a33e08","type":"amqp out","z":"c80985bf.0d2388","name":"","routingkey":"","iotype":"4","ioname":"routerQ","server":"1a870f79.ae0e91","x":740,"y":80,"wires":[]},{"id":"75519d6b.2a4574","type":"function","z":"c80985bf.0d2388","name":"Get Items","func":"// save the originial message in the flow object \n// and merg in the new information after the http request\n// if we did not do this we would lose our flow state.\nflow.set(\"payload\", msg.payload);\n\n// The channel transaction properties are cached in the WSG DB\n// Look up the channel transaction properties to get the \n// username, password, baseURL, API end point etc...\n// format url according to the url pattern (also specified on the transaction properties)\n//   \n// Below is the end result of this activity:\nmsg.url =\"https://57e4f4625569a2ab8d8daf2239dabc17:b3e784e1a7aa163e0a402e2925d0e554@aeg-store1.myshopify.com/admin/products.json?fields=id,title\";\nmsg.method = \"GET\";\n\nreturn msg;\n\n\n","outputs":1,"noerr":0,"x":240,"y":180,"wires":[["f024c3b.a6f174"]]},{"id":"36deee7d.aa3f92","type":"comment","z":"c80985bf.0d2388","name":"WSG Service","info":"This is a fake WSG  service. It is hardcoded to mimic the following:\n* act as if it does a db lookup using acccount, location, device to find the channel transaction properties. \n* Use the properties to construct a proper request\n* Make a shopify WS request and save the resultes in the first element of payloadAttachments  \n  note: the first element is the \"primary file\" by default it is used by downstream services\n* Make a routing requst to continue the flow\n\n","x":130,"y":60,"wires":[]},{"id":"f024c3b.a6f174","type":"http request","z":"c80985bf.0d2388","name":"","method":"use","ret":"txt","url":"","tls":"","x":410,"y":260,"wires":[["561a608f.c25c4"]]},{"id":"561a608f.c25c4","type":"function","z":"c80985bf.0d2388","name":"Format Router Msg","func":"//save the web service response\nwsResponse = msg.payload;\n\n//restor the message from the session context\nmsg.payload = flow.get(\"payload\");\n\n//set the wsResponse as an INLINE attachment \nmsg.payload.flowContext.wsgResponseFilename = \"wsgresponse.json\";\nmsg.payload.payloadAttachments.unshift({\"location\":\"ATTACHED\",\"fileName\": \"wsgresponse.json\", \"charEncoding\": \"UTF-8\", \"fileType\":\"json\",\"inlineData\":wsResponse});\n\n//NOTE I am using UNSHIFT to add the output to the beginning of the array.  \n// the element in the aray points to the \"primary file\", \n// the \"primary file\" is use by downstream services.  \n// if a differnet attachment is to be \"primary\" then the subscriber flow must rearange\n// as part of implementations. \n\n//Generate uniue eventId and populate date/time for downstream tracking\nmsg.payload.eventid = \"eventId-GUID\";\nmsg.payload.eventDateTime = \"20170205T23:25:32.000+0000\";\n\n//set even info\nmsg.payload.eventSource = \"WSG\";\nmsg.payload.eventType = \"WSG_RESPONSE\";\n\n// Ask the orchestrator to ROUTE\nmsg.payload.routeAction = \"ROUTE\";\nreturn msg;\n","outputs":1,"noerr":0,"x":590,"y":180,"wires":[["edd0f78b.a33e08"]]},{"id":"619f0e80.82c1d","type":"switch","z":"441ab614.a9c4d8","name":"WSG - eventType?","property":"payload.eventType","propertyType":"msg","rules":[{"t":"eq","v":"WSG_RESPONSE","vt":"str"}],"checkall":"true","outputs":1,"x":550,"y":380,"wires":[["d812c4ad.6af1a8"]]},{"id":"d812c4ad.6af1a8","type":"function","z":"441ab614.a9c4d8","name":"Prep TX Call","func":"//The following were set in the UI from a select box or something like that\n//when this WFD was created\n\nmsg.payload.flowContext.locationId = \"locationId-123\";\nmsg.payload.flowContext.deviceId = \"deviceId-123\";\nmsg.payload.flowContext.transactionId = \"trasactionId-123\"; //reference to a Shopify XSD for this subscriber\n\n//The TX services will look up the Channel Transaction Parms using the above IDs\n//the CT parms will then be used to locate the XSD and perform the translation\n\n\nreturn msg;","outputs":1,"noerr":0,"x":770,"y":320,"wires":[["8669ee61.b6746"]]},{"id":"8669ee61.b6746","type":"amqp out","z":"441ab614.a9c4d8","name":"","routingkey":"","iotype":"4","ioname":"txQ","server":"1a870f79.ae0e91","x":910,"y":240,"wires":[]},{"id":"898f638c.9e26f","type":"amqp in","z":"50d4334c.9179ec","name":"","topic":"","iotype":"4","ioname":"txQ","server":"1a870f79.ae0e91","x":90,"y":120,"wires":[["cf614094.fc0f6"]]},{"id":"1d59ec1c.c79cb4","type":"amqp out","z":"50d4334c.9179ec","name":"","routingkey":"","iotype":"4","ioname":"routerQ","server":"1a870f79.ae0e91","x":720,"y":80,"wires":[]},{"id":"cf614094.fc0f6","type":"function","z":"50d4334c.9179ec","name":"Do Tx ","func":"// The channel transaction properties are cached in the TX DB\n// Look up the channel transaction properties to get the XSD\n//   \n// I am not doing a real transformation instead I am going to just create \n// and Items array and map the price from Shopify to this item.\n// So I guess i am really mapping one field :-)\n\n//the WS response is saved in the primary file\nvar wsgResponse = JSON.parse(msg.payload.payloadAttachments[0].inlineData); \n\n//my nChannel Items object\nvar nchItems = JSON.parse('[{\"Name\": \"AEG ITEM1\",\"MasterPrice\": 1.00,\"SKU\": \"AEG001\"} ]');\n\n\n//the transformation!\nnchItems[0].Name = wsgResponse.products[0].title;\n\n\n//set the wsResponse asan INLINE attachment, at the primary file\nmsg.payload.flowContext.txOutputFilename = \"txOutput.json\";\nmsg.payload.flowContext.txObjectType = \"ITEM\";\nmsg.payload.payloadAttachments.unshift({\"location\":\"ATTACHED\",\"fileName\": \"txOutput.json\", \"charEncoding\": \"UTF-8\", \"fileType\":\"json\",\"inlineData\":nchItems});\n\n\n//NOTE I am using UNSHIFT to add the output to the beginning of the array.  \n// the element in the aray points to the \"primary file\", \n// the \"primary file\" is use by downstream services.  \n// if a differnet attachment is to be \"primary\" then the subscriber flow must rearange\n// as part of implementations. \n\n\nreturn msg;\n\n\n","outputs":1,"noerr":0,"x":250,"y":180,"wires":[["9af62e0e.b0113"]]},{"id":"4e121707.4316b8","type":"comment","z":"50d4334c.9179ec","name":"TX Service","info":"This is a fake TX service. It is hardcoded to mimic the following:\n* act as if it does a db lookup using account, location, device to find the channel transaction properties. \n* Use the properties to locate the XSD\n* transform the data to nChannel canonical and save the resultes in the first element of payloadAttachments  \n  note: the first element is the \"primary file\" by default it is used by downstream services\n* Make a routing requst to continue the flow","x":100,"y":60,"wires":[]},{"id":"9af62e0e.b0113","type":"function","z":"50d4334c.9179ec","name":"Format Router Msg","func":"\n//Generate uniue eventId and populate date/time for downstream tracking\nmsg.payload.eventid = \"eventId-GUID\";\nmsg.payload.eventDateTime = \"20170205T23:25:32.000+0000\";\n\n//set even info\nmsg.payload.eventSource = \"TX\";\nmsg.payload.eventType = \"TX_OUTPUT\";\n\n// Ask the orchestrator to ROUTE\nmsg.payload.routeAction = \"ROUTE\";\nreturn msg;\n","outputs":1,"noerr":0,"x":490,"y":180,"wires":[["1d59ec1c.c79cb4"]]},{"id":"77ffec29.acdad4","type":"switch","z":"441ab614.a9c4d8","name":"TX - eventType?","property":"payload.eventType","propertyType":"msg","rules":[{"t":"eq","v":"TX_OUTPUT","vt":"str"}],"checkall":"true","outputs":1,"x":520,"y":480,"wires":[["f7d08325.0d9c6"]]},{"id":"3f658d7.d356572","type":"function","z":"441ab614.a9c4d8","name":"Prep nchAPI Call","func":"//todo - change routAction to just action and use it for the router and the service\n\n// then set the action to UPSERT\n\n//given that we just came from TX use the TX object type to set the API object type\nmsg.payload.flowContext.APIObjectType = msg.payload.flowContext.txObjectType;\n\n\nreturn msg;","outputs":1,"noerr":0,"x":1030,"y":440,"wires":[["7314c904.c490a8"]]},{"id":"f7d08325.0d9c6","type":"switch","z":"441ab614.a9c4d8","name":"TX_OUTPUT - ObjectType?","property":"payload.flowContext.txObjectType","propertyType":"msg","rules":[{"t":"eq","v":"ITEM","vt":"str"},{"t":"eq","v":"ORDER","vt":"str"},{"t":"eq","v":"CUSTOMER","vt":"str"}],"checkall":"true","outputs":3,"x":800,"y":520,"wires":[["3f658d7.d356572"],[],[]]},{"id":"7314c904.c490a8","type":"amqp out","z":"441ab614.a9c4d8","name":"","routingkey":"","iotype":"4","ioname":"nchQ","server":"1a870f79.ae0e91","x":1130,"y":320,"wires":[]},{"id":"1d0915d6.4f525a","type":"comment","z":"e72f5872.774f38","name":"nch API Gateway Service","info":"This is a fake service. It is hardcoded to mimic the following:\n* look at the action it will be something like GET, UPDATE, DELETE, or UPSERT\n* look at the object tyoe see: msg.payload.flowContext.APIObjectType\n* then call the nch API and do it!\n    for example if action is UPSERT and type is ITEM \n    then it will use the ITEM data in the primary attachment to do and UPSERT on the nch API\n","x":150,"y":60,"wires":[]},{"id":"2c60df03.6c8f3","type":"amqp in","z":"e72f5872.774f38","name":"","topic":"","iotype":"4","ioname":"nchQ","server":"1a870f79.ae0e91","x":90,"y":140,"wires":[["71bec4ba.f4bf7c"]]},{"id":"fe008789.4f9938","type":"amqp out","z":"e72f5872.774f38","name":"","routingkey":"","iotype":"4","ioname":"routerQ","server":"1a870f79.ae0e91","x":740,"y":140,"wires":[]},{"id":"71bec4ba.f4bf7c","type":"function","z":"e72f5872.774f38","name":"Prep API Action","func":"// save the originial message in the flow object \n// and merg in the new information after the http request\n// if we did not do this we would lose our flow state.\nflow.set(\"payload\", msg.payload);\n\n\nmsg.url =\"http://api.dev.nchannel.com/items/1353?token=sharp&dataformat=json\";\nmsg.method = \"POST\";\n\n//the item data should be in the primary attachment\nmsg.payload = msg.payload.payloadAttachments[0].inlineData; \n\nreturn msg;\n\n\n","outputs":1,"noerr":0,"x":240,"y":200,"wires":[["ab7a134f.5aaa6"]]},{"id":"ab7a134f.5aaa6","type":"http request","z":"e72f5872.774f38","name":"","method":"use","ret":"txt","url":"","tls":"","x":390,"y":280,"wires":[["fc60162d.f1fea8"]]},{"id":"fc60162d.f1fea8","type":"function","z":"e72f5872.774f38","name":"Format Router Msg","func":"//save the web service response\nnchAPIResponse = msg.payload;\n\n//restor the message from the session context\nmsg.payload = flow.get(\"payload\");\n\n//set the wsResponse as an INLINE attachment \nmsg.payload.flowContext.nchAPIResponseFilename = \"nchAPIResponse.json\";\nmsg.payload.payloadAttachments.unshift({\"location\":\"ATTACHED\",\"fileName\": \"nchAPIResponse.json\", \"charEncoding\": \"UTF-8\", \"fileType\":\"json\",\"inlineData\":nchAPIResponse});\n\n//NOTE I am using UNSHIFT to add the output to the beginning of the array.  \n// the element in the aray points to the \"primary file\", \n// the \"primary file\" is use by downstream services.  \n// if a differnet attachment is to be \"primary\" then the subscriber flow must rearange\n// as part of implementations. \n\n//Generate uniue eventId and populate date/time for downstream tracking\nmsg.payload.eventid = \"eventId-GUID\";\nmsg.payload.eventDateTime = \"20170205T23:25:32.000+0000\";\n\n//set even info\nmsg.payload.eventSource = \"NCH_API\";\nmsg.payload.eventType = \"NCHAPI_RESPONSE\";\n\n// Ask the orchestrator to ROUTE\nmsg.payload.routeAction = \"ROUTE\";\nreturn msg;\n","outputs":1,"noerr":0,"x":570,"y":200,"wires":[["fe008789.4f9938"]]},{"id":"274fe86e.99bd58","type":"link out","z":"441ab614.a9c4d8","name":"","links":["b91c94d9.2ad818"],"x":455,"y":640,"wires":[]},{"id":"8b201838.e6d838","type":"comment","z":"441ab614.a9c4d8","name":"The EndI ","info":"I need to give this more thought.  Maybe the end is better as a sub-flow?","x":540,"y":640,"wires":[]}]