[
  {
    "id": "eaa9409e.ffdbc",
    "type": "tab",
    "label": "Initiators"
  },
  {
    "id": "9d03a6f0.941a98",
    "type": "tab",
    "label": "Router"
  },
  {
    "id": "441ab614.a9c4d8",
    "type": "tab",
    "label": "Acct1 Flow"
  },
  {
    "id": "4f58d434.20d3cc",
    "type": "tab",
    "label": "Context Service"
  },
  {
    "id": "d7204c91.7351c",
    "type": "tab",
    "label": "Tracking Service"
  },
  {
    "id": "78c4304b.eef76",
    "type": "tab",
    "label": "Item Processing Service"
  },
  {
    "id": "2e86f767.f28b28",
    "type": "tab",
    "label": "Shopify Item Processor Service"
  },
  {
    "id": "1a870f79.ae0e91",
    "type": "amqp-server",
    "z": "",
    "host": "p1.dcos",
    "port": "10003",
    "vhost": "demo-vhost",
    "keepalive": "30",
    "usetls": false,
    "verifyservercert": true,
    "usetopology": false,
    "topology": "{\n\t\"exchanges\": [\n\t\t{\"name\": \"exchange1\", \"type\": \"direct\", \"options\": {\"durable\": false}},\n\t\t{\"name\": \"exchange2\"}\n\t],\n\t\"queues\": [\n\t\t{\"name\": \"queue1\", \"options\": {\"messageTtl\": 60000}},\n\t\t{\"name\": \"queue2\"}\n\t],\n\t\"bindings\": [\n\t\t{\"source\": \"exchange1\", \"queue\": \"queue1\", \"pattern\": \"debug\", \"args\": {}},\n\t\t{\"source\": \"exchange1\", \"exchange\": \"exchange2\", \"pattern\": \"error\"},\n\t\t{\"source\": \"exchange2\", \"queue\": \"queue2\"}\n\t]\n}"
  },
  {
    "id": "d64b8e3f.b60c",
    "type": "link in",
    "z": "441ab614.a9c4d8",
    "name": "",
    "links": [
      "96ea41ed.f886f"
    ],
    "x": 155,
    "y": 280,
    "wires": [
      [
        "6bd547d7.a21888"
      ]
    ]
  },
  {
    "id": "6bd547d7.a21888",
    "type": "switch",
    "z": "441ab614.a9c4d8",
    "name": "Event Type?",
    "property": "payload.eventType",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "ERP",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "ITEM_PROCESSING",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "SHOPIFY_ITEM_PROCESSING",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "ORDER_PROCESSING",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 4,
    "x": 311,
    "y": 380,
    "wires": [
      [
        "35f79941.1a1146"
      ],
      [
        "114524d9.d54b5b"
      ],
      [
        "d5216448.7a2198"
      ],
      []
    ]
  },
  {
    "id": "c892c665.381b28",
    "type": "amqp out",
    "z": "441ab614.a9c4d8",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "itemQ",
    "server": "1a870f79.ae0e91",
    "x": 798,
    "y": 64,
    "wires": []
  },
  {
    "id": "35f79941.1a1146",
    "type": "switch",
    "z": "441ab614.a9c4d8",
    "name": "ERP - documentType",
    "property": "payload.documentType",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "ITEMS",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 1,
    "x": 580,
    "y": 104,
    "wires": [
      [
        "c892c665.381b28",
        "401ce4b7.b9825c"
      ]
    ]
  },
  {
    "id": "d5216448.7a2198",
    "type": "switch",
    "z": "441ab614.a9c4d8",
    "name": "Shioify Item - supplierList?",
    "property": "payload.flowContext.supplierListFilename",
    "propertyType": "msg",
    "rules": [
      {
        "t": "nnull"
      }
    ],
    "checkall": "true",
    "outputs": 1,
    "x": 600,
    "y": 424,
    "wires": [
      [
        "e4e95b95.885918"
      ]
    ]
  },
  {
    "id": "114524d9.d54b5b",
    "type": "switch",
    "z": "441ab614.a9c4d8",
    "name": "Item - dest?",
    "property": "payload.destination",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "SHOPIFY",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "AMAZON",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "EBAY",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 3,
    "x": 550,
    "y": 286,
    "wires": [
      [
        "9f8c8bb1.868aa8"
      ],
      [
        "b33b0e31.d81ad"
      ],
      [
        "371ed83a.4a8528"
      ]
    ]
  },
  {
    "id": "9f8c8bb1.868aa8",
    "type": "amqp out",
    "z": "441ab614.a9c4d8",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "shopifyItemQ",
    "server": "1a870f79.ae0e91",
    "x": 828,
    "y": 220,
    "wires": []
  },
  {
    "id": "b33b0e31.d81ad",
    "type": "amqp out",
    "z": "441ab614.a9c4d8",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "amazonItemQ",
    "server": "1a870f79.ae0e91",
    "x": 828,
    "y": 280,
    "wires": []
  },
  {
    "id": "371ed83a.4a8528",
    "type": "amqp out",
    "z": "441ab614.a9c4d8",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "ebayItemQ",
    "server": "1a870f79.ae0e91",
    "x": 829,
    "y": 348,
    "wires": []
  },
  {
    "id": "e4e95b95.885918",
    "type": "switch",
    "z": "441ab614.a9c4d8",
    "name": "Supplier - dest?",
    "property": "payload.destination",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "SHOPIFY",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "AMAZON",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "EBAY",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 3,
    "x": 840,
    "y": 480,
    "wires": [
      [
        "4dcec3eb.af2e2c"
      ],
      [
        "29b37179.6b4bbe"
      ],
      [
        "702c80d9.6dc9b"
      ]
    ]
  },
  {
    "id": "4dcec3eb.af2e2c",
    "type": "amqp out",
    "z": "441ab614.a9c4d8",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "shopifySupplierQ",
    "server": "1a870f79.ae0e91",
    "x": 1101,
    "y": 422,
    "wires": []
  },
  {
    "id": "29b37179.6b4bbe",
    "type": "amqp out",
    "z": "441ab614.a9c4d8",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "amazonSupplierQ",
    "server": "1a870f79.ae0e91",
    "x": 1101,
    "y": 482,
    "wires": []
  },
  {
    "id": "702c80d9.6dc9b",
    "type": "amqp out",
    "z": "441ab614.a9c4d8",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "ebaySupplierQ",
    "server": "1a870f79.ae0e91",
    "x": 1091,
    "y": 542,
    "wires": []
  },
  {
    "id": "7479f898.9f9bb8",
    "type": "amqp out",
    "z": "eaa9409e.ffdbc",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "routerQ",
    "server": "1a870f79.ae0e91",
    "x": 400,
    "y": 180,
    "wires": []
  },
  {
    "id": "5bd6be0e.637c6",
    "type": "inject",
    "z": "eaa9409e.ffdbc",
    "name": "ERP push items faker",
    "topic": "test",
    "payload": "{   \"accountId\": \"acct1\",   \"locationId\": \"loc1\",   \"deviceId\": \"dev1\",   \"routeAction\": \"START\",   \"destination\": \"SHOPIFY\",   \"documentType\": \"ITEMS\",   \"documentName\": \"items123.dat\",   \"flowSesionId\": \"flowSessionId-GUID\",   \"eventId\": \"eventId-GUID\",   \"eventDateTime\": \"20170205T23:25:32.000+0000\",   \"eventType\": \"ERP\",   \"flowContext\": {     \"testProdFlag\": \"TEST\",     \"altBillingAccount\": \"acct999\"   },   \"payloadAttachments\": [     {       \"fileName\": \"items123.dat\",       \"fileStorageId\": \"items123-storage-GUID\",       \"charEncoding\": \"UTF-8\",       \"fileType\": \"ITEM\"     }   ] }",
    "payloadType": "json",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 149,
    "y": 118,
    "wires": [
      [
        "7479f898.9f9bb8"
      ]
    ]
  },
  {
    "id": "d70a77e9.144ba8",
    "type": "comment",
    "z": "eaa9409e.ffdbc",
    "name": "ReadMe",
    "info": "# Initiators \n\nData from an external system is received by and endpoint and sent to the router \nwhere a bespoke flow is performed.  \n\n## Flow Initiation Message Construction \nOnce data is recieved from the endpoint the connector must construct a *Flow Initiation Message* \nand then that message to the router exchange to initiate the flow\n\nHere is the fake order message we will use to start the flow\n\n```\n{\n  \"accountId\": \"acct1\",\n  \"locationId\": \"loc1\",\n  \"deviceId\": \"dev1\",\n  \"routeAction\": \"START\",\n  \"destination\": \"SHOPIFY\",\n  \"documentType\": \"ITEMS\",\n  \"documentName\": \"items123.dat\",\n  \"flowSesionId\": \"flowSessionId-GUID\",\n  \"eventId\": \"eventId-GUID\",\n  \"eventDateTime\": \"20170205T23:25:32.000+0000\",\n  \"eventType\": \"ERP\",\n  \"flowContext\": {\n    \"testProdFlag\": \"TEST\",\n    \"altBillingAccount\": \"acct999\"\n  },\n  \"payloadAttachments\": [\n    {\n      \"fileName\": \"items123.dat\",\n      \"fileStorageId\": \"items123-storage-GUID\",\n      \"charEncoding\": \"UTF-8\",\n      \"fileType\": \"ITEM\"\n    }\n  ]\n}\n\n\n```\n\nHere is the schemp for an initial flow message\n\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"Flow Initiation\",\n  \"description\": \"The first message in a flow\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"accountId\": {\n      \"description\": \"A unique Id for the organization that owns this message.\",\n      \"type\": \"string\"\n    },\n    \"locationId\": {\n      \"description\": \"A unique Id for the device location.\",\n      \"type\": \"string\"\n    },\n    \"deviceId\": {\n      \"description\": \"A unique Id for the device.\",\n      \"type\": \"string\"\n    },  \n    \"routeAction\": {\n      \"description\": \"START - start a flow, ROUTE - continue an existing flow, END - end a flow.\",\n      \"type\": \"string\"\n    },      \n    \"destination\": {\n      \"description\": \"The destinaton such as SHOPIFY, EBAY, AMAZON, etc...\",\n      \"type\": \"string\"\n    },\n    \"documentType\": {\n      \"description\": \"The payload type i.e. ORDERS, ITEMS, SALES, etc..\",\n      \"type\": \"string\"\n    },\n    \"documentName\": {\n      \"description\": \"A name for the payload type such as an Order Number, a File Name, a Batch ID etc.\",\n      \"type\": \"string\"\n    },    \n    \"flowSessionId\": {\n      \"description\": \"A globally unique ID for this flow.  This will be used for tracking\",\n      \"type\": \"string\"\n    },    \n    \"eventId\": {\n      \"description\": \"A globally unique ID for this event.  This will be used for tracking\",\n      \"type\": \"string\"\n    },\n    \"eventDateTime\": {\n      \"description\": \"The date and time on which this event occurred.\",\n      \"type\": \"string\"\n    },\n    \"eventType\": {\n      \"description\": \"The type of event such as ERP, ORDER_PROCESSING, ITEM_PROCESSING, SUPPLIER_PROCESSING etc.. \",\n      \"type\": \"string\"\n    },\n    \"flowContext\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\n        \"type\": \"string\",\n        \"description\": \"string values\"\n      }\n    },\n    \"payloadAttachments\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"fileName\": {\n            \"type\": \"string\",\n            \"description\": \"The file name\",\n            \"required\": true\n          },\n          \"fileStorageId\": {\n            \"type\": \"string\",\n            \"description\": \"A unique storage id used to retrieve the file if needed\",\n            \"required\": true\n          },\n          \"charEncoding\": {\n            \"type\": \"string\",\n            \"description\": \"the char encodeing of the file\",\n            \"required\": true\n          },\n          \"fileType\": {\n            \"type\": \"string\",\n            \"description\": \"file type such as, ITEMS, ORDERS, SALES \",\n            \"required\": false\n          }\n        },\n        \"description\": \"the value\",\n        \"required\": true\n      }\n    }\n  },\n  \"required\": [\n    \"accountId\",\n    \"locationId\",\n    \"routeAction\",\n    \"deviceId\",\n    \"eventId\",\n    \"eventDateTime\",\n    \"eventType\"\n  ]\n}\n```\n",
    "x": 103,
    "y": 61,
    "wires": []
  },
  {
    "id": "47eacd96.ba0cc4",
    "type": "amqp in",
    "z": "9d03a6f0.941a98",
    "name": "",
    "topic": "",
    "iotype": "4",
    "ioname": "routerQ",
    "server": "1a870f79.ae0e91",
    "x": 90,
    "y": 260,
    "wires": [
      [
        "7c857e4a.48ef2"
      ]
    ]
  },
  {
    "id": "c6c5be76.01ccc",
    "type": "switch",
    "z": "9d03a6f0.941a98",
    "name": "ROUTE - Select Account",
    "property": "payload.accountId",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "acct1",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "acct2",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "acct3",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "acct4",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 4,
    "x": 670,
    "y": 420,
    "wires": [
      [
        "96ea41ed.f886f"
      ],
      [
        "1466bf81.ceedd"
      ],
      [
        "8a153e23.b6606"
      ],
      [
        "5b8e4e07.19cfd"
      ]
    ]
  },
  {
    "id": "96ea41ed.f886f",
    "type": "link out",
    "z": "9d03a6f0.941a98",
    "name": "acct1",
    "links": [
      "d64b8e3f.b60c"
    ],
    "x": 878.5,
    "y": 315.1499938964844,
    "wires": []
  },
  {
    "id": "1466bf81.ceedd",
    "type": "link out",
    "z": "9d03a6f0.941a98",
    "name": "acct2",
    "links": [],
    "x": 877.5,
    "y": 373.1499938964844,
    "wires": []
  },
  {
    "id": "8a153e23.b6606",
    "type": "link out",
    "z": "9d03a6f0.941a98",
    "name": "acct3",
    "links": [],
    "x": 881.5,
    "y": 460.1499938964844,
    "wires": []
  },
  {
    "id": "82aec810.f19ad8",
    "type": "comment",
    "z": "9d03a6f0.941a98",
    "name": "System Flow",
    "info": "",
    "x": 272.5,
    "y": 94.14999389648438,
    "wires": []
  },
  {
    "id": "175fddc2.3a2192",
    "type": "comment",
    "z": "9d03a6f0.941a98",
    "name": "Subscriber Flows",
    "info": "",
    "x": 920,
    "y": 418,
    "wires": []
  },
  {
    "id": "5b8e4e07.19cfd",
    "type": "link out",
    "z": "9d03a6f0.941a98",
    "name": "acct4",
    "links": [],
    "x": 883.5,
    "y": 516.1499938964844,
    "wires": []
  },
  {
    "id": "72f1e807.129b48",
    "type": "amqp in",
    "z": "78c4304b.eef76",
    "name": "",
    "topic": "",
    "iotype": "4",
    "ioname": "itemQ",
    "server": "1a870f79.ae0e91",
    "x": 90,
    "y": 140,
    "wires": [
      [
        "303fcd3b.9ac552"
      ]
    ]
  },
  {
    "id": "ba9063cb.1f0fc",
    "type": "amqp out",
    "z": "78c4304b.eef76",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "routerq",
    "server": "1a870f79.ae0e91",
    "x": 505,
    "y": 143,
    "wires": []
  },
  {
    "id": "303fcd3b.9ac552",
    "type": "function",
    "z": "78c4304b.eef76",
    "name": "Item Processing",
    "func": "// 1) Read the items and insert into nChannel proper\n// 2) Generate a file of suppliers found while processing items\n//    add the supplier file to storage and update command message with require referneces\npayload.flowContext.supplierListFilename = \"suppliers123.dat\";\nmsg.payload.payloadAttachments.push({\"fileName\": \"suppliers123.dat\",\"fileStorageId\": \"suppliers-storage-GUID\", \"charEncoding\": \"UTF-8\", \"fileType\":\"SUPPLIER\"});\n\n// 3) Generate uniue eventId and populate date/time for downstream tracking\nmsg.payload.eventid = \"eventId-GUID\";\nmsg.payload.eventDateTime = \"20170205T23:25:32.000+0000\";\n\n// 4) Set the event type so the router can figure out what to do next\nmsg.payload.eventType = \"ITEM_PROCESSING\";\n\nreturn msg;\n\n\n",
    "outputs": 1,
    "noerr": 0,
    "x": 287,
    "y": 217,
    "wires": [
      [
        "ba9063cb.1f0fc"
      ]
    ]
  },
  {
    "id": "de1ea0f1.0a40c",
    "type": "comment",
    "z": "78c4304b.eef76",
    "name": "Item Processing",
    "info": "This is a fake item processing service. It is hardcoded to mimic the following:\n* act as if it reads the items from storage using the info in payloadAttachments\n* create a supplier file for suppliers found on the items and adds it to the payloadAttachments \n\nThe supplier list is potentially acted upon downstream depending on the customer\nspecific routing rules.\n\nTherefore the payloadAttachments will look like this after the item processor runs:\n\n\"payloadAttachments\": [\n    {\n      \"fileName\": \"items123.dat\",\n      \"fileStorageId\": \"item-storage-GUID\",\n      \"charEncoding\": \"UTF-8\",\n      \"fileType\": \"ITEMS\"\n    },\n    {\n      \"fileName\": \"suppliers123.dat\",\n      \"fileStorageId\": \"supplier-storage-GUID\",\n      \"charEncoding\": \"UTF-8\",\n      \"fileType\": \"SUPPLIERS\"\n    }\n    \n  ]",
    "x": 120,
    "y": 80,
    "wires": []
  },
  {
    "id": "7c857e4a.48ef2",
    "type": "function",
    "z": "9d03a6f0.941a98",
    "name": "prep flow",
    "func": "//generate a tracking message\n//must use msg for now\ntrackingMsg = msg;\n\n//set parent and event ids\nmsg.payload.parentEventId = msg.payload.eventId;\nmsg.payload.eventId = null; //next service is expected to populate eventId\n\nreturn [trackingMsg, msg];\n\n",
    "outputs": "2",
    "noerr": 0,
    "x": 240,
    "y": 340,
    "wires": [
      [
        "ea7abd4a.34d28"
      ],
      [
        "140f4067.f103a"
      ]
    ]
  },
  {
    "id": "ea7abd4a.34d28",
    "type": "amqp out",
    "z": "9d03a6f0.941a98",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "trackingQ",
    "server": "1a870f79.ae0e91",
    "x": 400,
    "y": 240,
    "wires": []
  },
  {
    "id": "140f4067.f103a",
    "type": "switch",
    "z": "9d03a6f0.941a98",
    "name": "Router Action",
    "property": "payload.routerAction",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "START",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "ROUTE",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "END",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "outputs": 3,
    "x": 420,
    "y": 418,
    "wires": [
      [
        "eaf80047.ca3b5"
      ],
      [
        "c6c5be76.01ccc"
      ],
      [
        "b5d2fcd6.5c84d"
      ]
    ]
  },
  {
    "id": "b5d2fcd6.5c84d",
    "type": "function",
    "z": "9d03a6f0.941a98",
    "name": "END",
    "func": "// do flowOnEnd stuff\n// need to give this more thought, maybe just track, do nothing for now\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 610,
    "y": 560,
    "wires": [
      []
    ]
  },
  {
    "id": "eaf80047.ca3b5",
    "type": "amqp out",
    "z": "9d03a6f0.941a98",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "contextQ",
    "server": "1a870f79.ae0e91",
    "x": 620,
    "y": 260,
    "wires": []
  },
  {
    "id": "5fa86be.3613994",
    "type": "amqp in",
    "z": "4f58d434.20d3cc",
    "name": "",
    "topic": "",
    "iotype": "4",
    "ioname": "contextQ",
    "server": "1a870f79.ae0e91",
    "x": 100,
    "y": 120,
    "wires": [
      [
        "a6d8b875.d95f08"
      ]
    ]
  },
  {
    "id": "4bb93c85.468454",
    "type": "amqp out",
    "z": "4f58d434.20d3cc",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "routerq",
    "server": "1a870f79.ae0e91",
    "x": 480,
    "y": 100,
    "wires": []
  },
  {
    "id": "a6d8b875.d95f08",
    "type": "function",
    "z": "4f58d434.20d3cc",
    "name": "Get Context",
    "func": "// 1) perform lookup on given Account, Location and Device\n// 2) Generate a file with Account, Location and Device\n//    add the context file to storage and update command message with require referneces\npayload.flowContext.contextFilename = \"context123.dat\";\nmsg.payload.payloadAttachments.push({\"fileName\": \"context123.dat\",\"fileStorageId\": \"context-storage-GUID\", \"charEncoding\": \"UTF-8\", \"fileType\":\"CONTEXT\"});\n\n// 3) Generate uniue eventId and populate date/time for downstream tracking\nmsg.payload.eventid = \"eventId-GUID\";\nmsg.payload.eventDateTime = \"20170205T23:25:32.000+0000\";\n\n// 4) In this case we dont want to change the eventTpe\n//    we just want to look up the context and then have the flow contine \n//    where it left off\n//msg.payload.eventType = \"<dont set, keep the same>\";\n\n// 5) change router action from START to ROUTE\nmsg.payload.routeAction = \"ROUTE\";\n\nreturn msg;\n\n\n",
    "outputs": 1,
    "noerr": 0,
    "x": 290,
    "y": 200,
    "wires": [
      [
        "4bb93c85.468454"
      ]
    ]
  },
  {
    "id": "42cf8fad.8d7f5",
    "type": "comment",
    "z": "4f58d434.20d3cc",
    "name": "Context Service",
    "info": "This is a fake item context service. It is hardcoded to mimic the following:\n* act as if it does a lookup on acccount, location and device\n* create a context file with account, location and device detail and adds it to the payloadAttachments \n\nThe context file is potentially used by downstream services \n\nTherefore add to payloadAttachments \n\n\"payloadAttachments\": [\n    {\n      \"fileName\": \"context123.dat\",\n      \"fileStorageId\": \"context-storage-GUID\",\n      \"charEncoding\": \"UTF-8\",\n      \"fileType\": \"CONTEXT\"\n    },\n\n    \n  ]",
    "x": 120,
    "y": 60,
    "wires": []
  },
  {
    "id": "ede143b8.59747",
    "type": "amqp in",
    "z": "d7204c91.7351c",
    "name": "",
    "topic": "",
    "iotype": "4",
    "ioname": "trackingQ",
    "server": "1a870f79.ae0e91",
    "x": 160,
    "y": 120,
    "wires": [
      [
        "594021cb.fb025"
      ]
    ]
  },
  {
    "id": "a7aab2a8.daf86",
    "type": "comment",
    "z": "d7204c91.7351c",
    "name": "Tracking Service",
    "info": "This is a fake tracking service. It is incomplete, need to give this more thought...\n",
    "x": 180,
    "y": 60,
    "wires": []
  },
  {
    "id": "594021cb.fb025",
    "type": "file",
    "z": "d7204c91.7351c",
    "name": "",
    "filename": "/tmp/tracking.dat",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "x": 420,
    "y": 180,
    "wires": []
  },
  {
    "id": "401ce4b7.b9825c",
    "type": "amqp out",
    "z": "441ab614.a9c4d8",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "orderStatQ",
    "server": "1a870f79.ae0e91",
    "x": 818,
    "y": 144,
    "wires": []
  },
  {
    "id": "c1492027.e25e5",
    "type": "amqp in",
    "z": "2e86f767.f28b28",
    "name": "",
    "topic": "",
    "iotype": "4",
    "ioname": "shopifyItemQ",
    "server": "1a870f79.ae0e91",
    "x": 130,
    "y": 120,
    "wires": [
      [
        "8586221b.7c133"
      ]
    ]
  },
  {
    "id": "2ba08674.ab9aba",
    "type": "amqp out",
    "z": "2e86f767.f28b28",
    "name": "",
    "routingkey": "",
    "iotype": "4",
    "ioname": "routerQ",
    "server": "1a870f79.ae0e91",
    "x": 551,
    "y": 120,
    "wires": []
  },
  {
    "id": "8586221b.7c133",
    "type": "function",
    "z": "2e86f767.f28b28",
    "name": "Shopify Item Processing",
    "func": "// 1) Read the items and insert/update on shopify\n\n// 2) Generate uniue eventId and populate date/time for downstream tracking\nmsg.payload.eventid = \"eventId-GUID\";\nmsg.payload.eventDateTime = \"20170205T23:25:32.000+0000\";\n\n// 4) Set the event type so the router can figure out what to do next\nmsg.payload.eventType = \"SHOPIFY_ITEM_PROCESSING\";\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 350,
    "y": 200,
    "wires": [
      [
        "2ba08674.ab9aba"
      ]
    ]
  },
  {
    "id": "53e06dfa.68be94",
    "type": "comment",
    "z": "2e86f767.f28b28",
    "name": "Shopify Item Processing Service",
    "info": "This is a fake supplier processing service. It is hardcoded to mimic the following:\n* act as if reads the items from storage using the info in payloadAttachments\n* insert or updates the items on shopify for the given account, location and device\n\n",
    "x": 190,
    "y": 60,
    "wires": []
  }
]
